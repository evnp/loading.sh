"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Logger_level_accessor_storage;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const narrow_1 = require("../utils/narrow");
/**
 * Logger.
 */
class Logger {
    /**
     * Logger level.
     */
    get level() { return __classPrivateFieldGet(this, _Logger_level_accessor_storage, "f"); }
    set level(value) { __classPrivateFieldSet(this, _Logger_level_accessor_storage, value, "f"); }
    /**
     * Construct a new Logger.
     *
     * @param level - Level.
     */
    constructor(level) {
        _Logger_level_accessor_storage.set(this, void 0);
        this.level = level;
    }
    /**
     * Log.
     *
     * @param level - Level.
     * @param message - Message.
     */
    log(level, message) {
        if (this.level === "off" /* LoggerLevel.OFF */)
            return;
        (0, narrow_1.Narrow)(level);
        if (Logger.values[level] < Logger.values[this.level])
            return;
        // eslint-disable-next-line no-console
        console[level](`[${level.toUpperCase().padEnd(5)}] ${message}`);
    }
    /**
     * Debug log message.
     *
     * @param message - Message.
     */
    debug(message) {
        this.log("debug" /* LoggerLevel.DEBUG */, message);
    }
    /**
     * Informational log message.
     *
     * @param message - Message.
     */
    info(message) {
        this.log("info" /* LoggerLevel.INFO */, message);
    }
    /**
     * Warning log message.
     *
     * @param message - Message.
     */
    warn(message) {
        this.log("warn" /* LoggerLevel.WARN */, message);
    }
    /**
     * Error log message.
     *
     * @param message - Message.
     */
    error(message) {
        this.log("error" /* LoggerLevel.ERROR */, message);
    }
}
exports.Logger = Logger;
_Logger_level_accessor_storage = new WeakMap();
/**
 * Logger level value.
 */
Logger.values = {
    debug: 1,
    info: 2,
    warn: 3,
    error: 4
};
